tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - sodalite/hpc/app/apps.yml
  - sodalite/hpc/app/workflows.yml
  - sodalite/openstack/openstack_keypair.yaml
  - sodalite/openstack/openstack_security_rule.yaml
  - sodalite/openstack/openstack_vm.yaml
  - radon/_definitions/radonnodesnifi__Nifi.tosca
  - radon/_definitions/radonrelationshipsdatapipeline__ConnectNifiLocal.tosca
  - radon/_definitions/radonnodesdatapipelinesource__ConsS3Bucket.tosca
  - radon/_definitions/radonnodesdatapipelinedestination__PublishGridFtp.tosca
  - radon/_definitions/radonnodesdatapipelinedestination__PubsS3Bucket.tosca
  - radon/_definitions/radonnodesdatapipelinesource__ConsumeGridFtp.tosca

topology_template:

  inputs:

    snow-ssh-key-name:  
      type: string 
    snow-ssh-public-key:  
      type: string 
    snow-image-name:  
      type: string 
    openstack-network-name:  
      type: string 
    openstack-floating-ip-pool:  
      type: string 
    snow-security-groups:  
      type: string    
    snow-flavor-name:  
      type: string
    snow-vm-username:
      type: string 
    os-env:
      type: map 

    hlrs-frontend-address:
      type: string
    hlrs-username:
      type: string

  node_templates:

    snow-keypair:
      type: sodalite.nodes.OpenStack.Keypair
      properties:  
        name: { get_input: snow-ssh-key-name } 
        public_key: { get_input: snow-ssh-public-key } 
        env: { get_input: os-env } 

    snow-gridftp-security-rules:  
      type: sodalite.nodes.OpenStack.SecurityRules 
      properties:  
        ports:  
          ssh:  
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 22 
            port_range_max: 22
          gridftp-control:  
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 2811 
            port_range_max: 2811 
            direction: egress
          gridftp-data:  
            port_range_min: 50000 
            port_range_max: 50100 
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
            direction: egress
        group_name:  snow-gridftp
        group_description:  Snow UC security group 
        env: { get_input: os-env } 

    snow-vm-gridftp:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        name:  snow-vm-gridftp
        key_name:         { get_input: snow-ssh-key-name } 
        image:            { get_input: snow-image-name }
        network:          { get_input: openstack-network-name } 
        security_groups:  { get_input: snow-security-groups } 
        flavor:           { get_input: snow-flavor-name }
        username:         { get_input: snow-vm-username }
        include_exporter: false
        timeout: 666
        floating_ip_pools: { get_input: openstack-floating-ip-pool } 
        env: { get_input: os-env } 
      requirements:  
        - protected_by: snow-gridftp-security-rules
        - dependency: snow-keypair

    # NiFi instance
    Nifi_0:
      type: radon.nodes.nifi.Nifi
      metadata:
        x: "643"
        y: "325"
        displayName: "Nifi"
      properties:
        port: 8080
        component_version: "1.12.1"
      requirements:
        - host:
            node: snow-vm-gridftp
            relationship: con_HostedOn_0
            capability: host

    PublishGridFtp_0:
      type: radon.nodes.datapipeline.destination.PublishGridFtp
      metadata:
        x: "1009"
        y: "183"
        displayName: "PublishGridFtp"
      properties:
        gridftp_port: 2811
        intermediate_folder: "/tmp/nifi_gridftp_publish/"
        schedulingStrategy: "EVENT_DRIVEN"
        schedulingPeriodCRON: "* * * * * ?"
        name: "sendTogridFTP"
        gridftp_user: "kamil"
        gridftp_host: "sodalite-fe.hlrs.de"
        gridftp_cert_path: "/home/kml/.globus"
        gridftp_directory: "~/radon-training/"
      requirements:
        - host:
            node: Nifi_0
            relationship: con_HostedOn_2
            capability: host

    ConsS3Bucket_0:
      type: radon.nodes.datapipeline.source.ConsS3Bucket
      metadata:
        x: "327"
        y: "178"
        displayName: "ConsS3Bucket"
      properties:
        BucketName: "kml-test-bucket"
        cred_file_path: "/home/kml/.aws/nifi_credentials"
        schedulingStrategy: "EVENT_DRIVEN"
        schedulingPeriodCRON: "* * * * * ?"
        name: "listenFromS3"
        Region: "eu-central-1"
      requirements:
        - connectToPipeline:
            node: PublishGridFtp_0
            relationship: con_ConnectNifiLocal_0
            capability: ConnectToPipeline
        - host:
            node: Nifi_0
            relationship: con_HostedOn_1
            capability: host


    hlrs-testbed:
      type: sodalite.nodes.hpc.WM
      properties:
        scheduler: torque
        username: { get_input: hlrs-username }
      attributes:
        public_address: { get_input: hlrs-frontend-address }
      capabilities:
        resources:
          properties:
            gpus: 5 
            cpus: 200
            memory: 650687
        optimisations:
          properties:
            target: hlrs_testbed # same as in modak db

    batch-app-runtime-hpc:
      type: sodalite.nodes.batch.Container.Runtime
      properties:
        runtime: "singularity"
        images_location: "images"
      requirements:
        - host: hlrs-testbed

    snow-training-app:
      type: sodalite.nodes.batch.Container.Application
      properties:
        app_tag: "snow-training-app"
        app_type: "python"
        executable: "bash -c 'tar -xf dataset.tar.xz && python peaklens-original-training_opt.py'"
        container_runtime: "tensorflow/tensorflow:1.11.0-gpu"
      requirements:
        - runtime: batch-app-runtime-hpc
        - host: hlrs-testbed

    snow-training-job:
      type: sodalite.nodes.batch.Container.JobExecution
      properties:
        job_name: "snow-training-job"
        wall_time_limit: "12:00:00"
        node_count: 1
        process_count_per_node: 20
        request_gpus: 1
        queue: "gpu"
        standard_output_file: "snow-training-job.out"
        standard_error_file: "snow-training-job.err"
        combine_stdout_stderr: true
        copy_environment: true
        request_event_notification: "abe"
        email_address: tokmakov@hlrs.de
        workspace: ~/radon-training
        # generated by IaCBuilder
        content: |
          #PBS -S /bin/bash
          ## START OF HEADER ## 
          #PBS -N snow-training-job
          #PBS -l walltime=12:00:00
          #PBS -q gpu
          #PBS -l nodes=1:ppn=20:gpus=1:gpu
          #PBS -o skyline-extraction-training.out
          #PBS -e skyline-extraction-training.err
          #PBS -j oe
          #PBS -m abe
          #PBS -M tokmakov@hlrs.de
          ## END OF HEADER ## 
          cd $PBS_O_WORKDIR
          export PATH=$PBS_O_WORKDIR:$PATH

          file=set_default_hlrs_testbed.sh
          if [ -f $file ] ; then rm $file; fi
          wget --no-check-certificate https://www.dropbox.com/s/hpfcwwkd4zy52t9/set_default_hlrs_testbed.sh
          chmod 755 set_default_hlrs_testbed.sh
          source set_default_hlrs_testbed.sh
          singularity exec --nv  $SINGULARITY_DIR/tensorflow_1.11.0-gpu.sif bash -c 'tar -xf dataset.tar.xz && python peaklens-original-training_opt.py'
      attributes:
        env:
          SOME_VAR: "SOME_VALUE"
      requirements:
        - application: snow-training-app
        - runtime: batch-app-runtime-hpc
        - host: hlrs-testbed

    workflow-elem-1:
      type: sodalite.nodes.workflow.Job
      requirements:
        - dependency: ConsS3Bucket_0
        - execution: snow-training-job
        - host: hlrs-testbed

    workflow-elem-result-1:
      type: sodalite.nodes.workflow.Result
      requirements:
        - job: workflow-elem-1
        - host: hlrs-testbed

    PubsS3Bucket_0:
      type: radon.nodes.datapipeline.destination.PubsS3Bucket
      metadata:
        x: "1042"
        y: "63"
        displayName: "PubsS3Bucket"
      properties:
        BucketName: "kml-test-bucket-result"
        cred_file_path: "/home/kml/.aws/nifi_credentials"
        schedulingStrategy: "EVENT_DRIVEN"
        schedulingPeriodCRON: "* * * * * ?"
        name: "sendToS3"
        Region: "eu-central-1"
      requirements:
        - host:
            node: Nifi_0
            relationship: con_HostedOn_3
            capability: host
        - dependency: workflow-elem-result-1

    ConsumeGridFtp_0:
      type: radon.nodes.datapipeline.source.ConsumeGridFtp
      metadata:
        x: "307"
        y: "71"
        displayName: "ConsumeGridFtp"
      properties:
        gridftp_port: 2811
        intermediate_folder: "/tmp/nifi_gridftp_subscribe/"
        schedulingStrategy: "EVENT_DRIVEN"
        schedulingPeriodCRON: "* * * * * ?"
        name: "receieveFromGFTP"
        gridftp_user: "kamil"
        gridftp_host: "sodalite-fe.hlrs.de"
        gridftp_cert_path: "/home/kml/.globus"
        gridftp_directory: "~/radon-training/protobufs/"
      requirements:
        - connectToPipeline:
            node: PubsS3Bucket_0
            relationship: con_ConnectNifiLocal_1
            capability: ConnectToPipeline
        - host:
            node: Nifi_0
            relationship: con_HostedOn_4
            capability: host

  # RADON relationships templates
  relationship_templates:
    con_HostedOn_0:
      type: tosca.relationships.HostedOn
    con_HostedOn_1:
      type: tosca.relationships.HostedOn
    con_HostedOn_2:
      type: tosca.relationships.HostedOn
    con_HostedOn_3:
      type: tosca.relationships.HostedOn
    con_HostedOn_4:
      type: tosca.relationships.HostedOn
    con_ConnectNifiLocal_0:
      type: radon.relationships.datapipeline.ConnectNifiLocal
    con_ConnectNifiLocal_1:
      type: radon.relationships.datapipeline.ConnectNifiLocal

